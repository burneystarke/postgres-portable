name: Build and Push Docker Images

on:
  workflow_dispatch:
    inputs:
      postgres_image:
        description: 'Full PostgreSQL image(s), comma-separated (e.g. postgres:16.10,postgres:15-alpine)'
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Single build job for manual dispatch
  images:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Generate matrix JSON
        id: set-matrix
        run: |
          IMAGES="${{ github.event.inputs.postgres_image }}"
          # Split by comma and trim spaces
          MATRIX_JSON=$(echo "$IMAGES" | jq -Rc 'split(",") | map(ltrimstr(" ") | rtrimstr(" "))')
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX_JSON"
  build:
    needs: images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        postgres_image: ${{ fromJSON(needs.images.outputs.matrix) }}
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Discover original image entrypoint and build custom tag
        id: params
        run: |
          SRC_IMAGE="${{ matrix.postgres_image }}"
          docker image pull $SRC_IMAGE
          ORIGINAL_ENTRYPOINT=$(docker image inspect $SRC_IMAGE | jq '.[].Config.Entrypoint | join(" ")' -r)
          REPO_TAG=$(docker image inspect $SRC_IMAGE | jq .[0].RepoTags[0] -r)
          IMAGE_TAG=$( echo $REPO_TAG | awk -F'/' '{n=split($NF, a, ":"); tag=a[2]; sub(":.+", "", $NF); if (NF==1) print $NF ":" tag; else print $(NF-1) "-" $NF ":" tag}')
          echo "Will tag $REPO_TAG as $IMAGE_TAG"
          IMAGE=$(echo $IMAGE_TAG | awk -F':' '{print $1}')
          TAG=$(echo $IMAGE_TAG | awk -F':' '{print $2}')
          echo "SRC_IMAGE=$SRC_IMAGE" >> $GITHUB_OUTPUT
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "ORIGINAL_ENTRYPOINT=$ORIGINAL_ENTRYPOINT" >> $GITHUB_OUTPUT
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.params.outputs.IMAGE }}
          tags: |
            type=raw,value=${{ steps.params.outputs.TAG }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            POSTGRES_IMAGE=${{ steps.params.outputs.SRC_IMAGE }}
          cache-from: type=gha,scope=${{ steps.params.outputs.IMAGE_TAG }}
          cache-to: type=gha,mode=max,scope=${{ steps.params.outputs.IMAGE_TAG }}